---
- name: Verify iso creation

  hosts: all

  gather_facts: false

  vars_files:
    - ./vars.yml

  tasks:

    - name: retrieve iso status
      stat:
        path: "{{ cache_dir }}/{{ vm.centos_installer_hostname }}.iso"
      vars:
        centos_installer_target_dir: "{{ playbook_dir }}"
      loop_control:
        loop_var: vm
        label: "{{ vm.centos_installer_hostname }}"
      loop: "{{ vms }}"
      register: vm_isos

    - name: verify iso creation
      fail:
        msg: unable to find iso
      loop_control:
        loop_var: vm_iso
        label: "{{ vm_iso.stat.path | default('unknown') }}"
      loop: "{{ vm_isos.results }}"
      when: not (vm_iso.stat.exists | bool)


- name: Add vms to inventory

  hosts: all

  become: yes

  vars_files:
    - ./vars.yml

  tasks:

    - block:

        - name: add debug ssh key
          authorized_key:
            user: "{{ ansible_user }}"
            state: present
            key: "{{ debug_pubkey }}"

        - name: add vm to inventory
          add_host:
            name: "{{ vm_hostname }}"
            groups:
              - install
            ansible_user: molecule
            ansible_host: "{{ vm_address }}"
            ansible_port: "{{ (ssh_port_base | int) + (port_offset | int) }}"
            ansible_ssh_private_key_file: "{{ kvm_key_pair_path }}"
            partition_method: "{{ vm.centos_partitioning_method }}"
            disk_size: "{{ vm.centos_installer_disk_size }}"
          vars:
            vm_hostname: "{{ vm.centos_installer_hostname }}"
            local_address: "{{ ansible_default_ipv4.address }}"
            vm_address: "{{ (test_local | default('no') | bool) | ternary(local_address, ansible_host) }}"
          loop_control:
            loop_var: vm
            index_var: port_offset
            label: "{{ vm.centos_installer_hostname }}"
          loop: "{{ vms }}"

      when: kvm_enabled | bool


- name: Test vms

  hosts: install

  gather_facts: no

  tasks:

    - name: debug connection parameters
      debug:
        msg: "{{ ansible_user }}@{{ ansible_host }} {{ ansible_ssh_common_args | default('') }} -i {{ ansible_ssh_private_key_file }}"

    - name: test connection
      wait_for_connection:
        sleep: 10
        timeout: 1200

    - name: gather facts
      setup:

    - name: gather partition info
      shell: "lsblk -l | grep /$"
      register: lsblk_output

    - name: check static partitioning
      fail:
        msg: "expected plain partitioning, found '{{ lsblk_output.stdout }}'"
      when:
        - partition_method == 'regular'
        - lsblk_output.stdout is not search("part") or
          lsblk_output.stdout is search("lvm")

    - block:

        - name: check lvm partitioning
          fail:
            msg: "lvm partitioning failed: {{ lsblk_output.stdout }}"
          when:
            - lsblk_output.stdout is not search('lvm')

      when: partition_method == 'lvm'

    - name: debug disk size
      debug:
        msg: "{{ installer_root_device }}"
      vars:
        installer_root_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"

    - name: check root device size
      fail:
        msg: "{{ installer_root_size }} < {{ installer_root_threshold }} ({{ disk_size }})"
      vars:
        installer_root_device: "{{ ansible_mounts | selectattr('mount', 'equalto', '/') | list | first }}"
        installer_root_size: "{{ installer_root_device.size_total }}"
        installer_root_threshold: "{{ (0.5 * (disk_size | int)) | int }}"
      when: (installer_root_size | int) < (installer_root_threshold | int)
